- set_fact:
    etcd_package_name: etcd-v*-linux-amd64
    kubernetes_package_name: kubernetes
    container_runtime_package_name: '{{ container_runtime }}*'
    docker_package_name: docker*
    cni_package_name: cni-plugins-linux-amd64-*

- name: 检查容器运行时
  run_once: yes
  fail: 
    msg: '目前 container_runtime 只支持 docker 和 containerd'
  when: container_runtime not in ['docker','containerd']

- name: 获取 Kubernetes 版本号 - 解压 Kubernetes 安装包到本机 /tmp 目录 (1/4)
  run_once: yes
  connection: local
  unarchive:
    src: '{{ item }}'
    dest: /tmp
  with_fileglob: '{{ package_dir }}/kubernetes-server-*.tar.gz'

- name: 获取 Kubernetes 版本号 - 设置临时变量保存 Kubernetes 安装包本地解压路径 (2/4)
  run_once: yes
  set_fact:
    kubernetes_bin_tmp_path: /tmp/{{ kubernetes_package_name }}/server/bin

- name: 获取 Kubernetes 版本号 (3/4)
  connection: local
  run_once: yes
  shell: '{{ kubernetes_bin_tmp_path }}/kubectl version --client=true -o json'
  register: k8s_version_result

- name: 获取 Kubernetes 版本号 - 设置变量 (4/4)
  run_once: yes
  set_fact:
    major_version: '{{ (k8s_version_result.stdout | from_json).clientVersion.major }}'
    minor_version: '{{ (k8s_version_result.stdout | from_json).clientVersion.minor }}'

- name: 当前集群版本信息
  run_once: yes
  debug:
    msg: '主版本：{{ major_version }}，子版本：{{ minor_version }}'

#- name: 检查容器运行时
#  run_once: yes
#  fail: 
#    msg: '不建议在 1.20+ 以上的 Kubernetes 集群继续使用 Docker 运行时'
#  when: (minor_version | int >= 20) and container_runtime == 'docker'

- name: 初始化配置 (1/1)
  fail:
    msg: 'is_mutil_master 必须定义，为 yes 表示多 master，no 表示单 master'
  run_once: yes
  when: not is_mutil_master is defined

- name: 根据配置文件加载节点信息 (1/1)
  run_once: yes
  set_fact: 
    master_list_str: '{% for host in groups["all"] %}{% if "master" in hostvars[host] and hostvars[host].master %}{{ host }},{% endif %}{% endfor %}'
    node_list_str: '{% for host in groups["all"] %}{% if "node" in hostvars[host] and hostvars[host].node %}{{ host }},{% endif %}{% endfor %}'
    etcd_list_str: '{% for host in groups["all"] %}{% if "etcd" in hostvars[host] and hostvars[host].etcd %}{{ host }},{% endif %}{% endfor %}'
    proxy_master_list_str: '{% for host in groups["all"] %}{% if "proxy_master" in hostvars[host] and hostvars[host].proxy_master %}{{ host }},{% endif %}{% endfor %}'
    ingress_list_str: '{% for host in groups["all"] %}{% if "ingress" in hostvars[host] and hostvars[host].ingress %}{{ hostvars[host].hostname }},{% endif %}{% endfor %}'
    max_proxy_priority: '{% set max = 0 %}{% for host in groups["all"] %}{% if "proxy_priority" in hostvars[host] %}{% if hostvars[host].proxy_priority > max %}{% set max = hostvars[host].proxy_priority%}{% if loop.last %}{{ max }}{% endif %}{% endif %}{% endif %}{% endfor %}'

- name: 获取当前执行 ansible-playbook 的用户名 (1/1)
  run_once: yes
  connection: local
  shell: whoami
  register: user_result

- name: 设置变量 (1/1)
  run_once: yes
  set_fact:
    master_list: '{{ master_list_str[0:-1].split(",") }}'
    node_list: '{{ node_list_str[0:-1].split(",") }}'
    etcd_list: '{{ etcd_list_str[0:-1].split(",") }}'
    ingress_list: '{{ ingress_list_str[0:-1].split(",") }}'
    proxy_master_list: '{{ proxy_master_list_str[0:-1].split(",") }}'
    manifests_dir: '{{ "manifests" | realpath }}'
    etcd_tls_dir: '{{ tls_dir }}/etcd'
    kubernetes_tls_dir: '{{ tls_dir }}/kubernetes'
    cfssl_bin: '/usr/local/bin/cfssl'
    cfssl_certinfo_bin: '/usr/local/bin/cfssl-certinfo'
    cfssl_json_bin: '/usr/local/bin/cfssl-json'
    dashboard_namespace: kubernetes-dashboard
    exec_user: '{{ user_result.stdout }}'
    service_net: '{% if service_net is defined %}{{ service_net }}{% else %}10.0.0.0/24{% endif %}'
    pod_net: '{% if pod_net is defined %}{{ pod_net }}{% else %}10.244.0.0/16{% endif %}'
#    container_runtime: '{% if container_runtime is defined and (major_version | int <= 1 and minor_version | int < 20) %}{{ container_runtime }}{% else %}containerd{% endif %}'

- name: 检查安装包目录({{ package_dir }})是否存在 (1/2)
  run_once: yes
  failed_when: no
  connection: local
  shell: '[ -d {{ package_dir }} ]'
  register: package_dir_exists

- name: 检查安装包目录({{ package_dir }})是否存在 (2/2)
  run_once: yes
  connection: local
  fail: 
    msg: 'package_dir: {{ package_dir }} 不存在'
  when: package_dir_exists.rc != 0

- name: 检查 ingress_controller_type 类型是否合法
  run_once: yes
  fail: 
    msg: 'ingress_controller_type 只能为 haproxy 或 nginx，你设置的：{{ingress_controller_type}}'
  when: ingress_controller_type is defined and ingress_controller_type not in ['haproxy','nginx']

- name: 检查 cni_type 类型是否合法
  run_once: yes
  fail: 
    msg: 'cni_type 只能为 flannel 或 calico，你设置的：{{cni_type}}'
  when: cni_type is defined and cni_type not in ['flannel','calico']

- name: 检查 Master 节点 (1/8)
  fail:
    msg: '至少需要一个 Master 节点'
  run_once: yes
  when: master_list[0] == ""

- name: 检查 Master 节点 (2/8)
  fail:
    msg: 'is_mutil_master: yes 表示多 Master 架构，但只定义了一个 Master 节点'
  run_once: yes
  when: is_mutil_master and (master_list | length) <= 1

- name: 检查 Master (3/8)
  fail:
    msg: 'is_mutil_master: yes 表示多 Master 架构，必须通过 virtual_ip 指定一个代理 Master 的 VIP'
  run_once: yes
  when: is_mutil_master and not (virtual_ip is defined)

- name: 检查 Master (4/8)
  fail:
    msg: 'is_mutil_master: yes 表示多 Master 架构，必须通过 proxy_master_port 指定代理 Master 的端口（默认为 7443）'
  run_once: yes
  when: is_mutil_master and not (proxy_master_port is defined)

- name: 检查 Master (5/8)
  fail:
    msg: 'is_mutil_master: yes 表示多 Master 架构，Master 中 api-server 默认监听 6443 端口，proxy_master_port 必须指定除 6443 以外的端口'
  run_once: yes
  when: is_mutil_master and proxy_master_port == 6443

- name: 检查 Master (6/8)
  fail:
    msg: 'is_mutil_master: yes 表示多 Master 架构，必须在 hosts 中通过 proxy_master: yes 标识一个以上的代理节点'
  run_once: yes
  when: is_mutil_master and proxy_master_list[0] == ""

- name: 检查 Master (7/8)
  fail:
    msg: 'is_mutil_master: no 表示单 Master 架构，但标识了多个节点为 Master'
  run_once: yes
  when: not is_mutil_master and (master_list | length) > 1

- name: 检查 Master (8/8)
  fail:
    msg: '{{ ansible_host }} 使用 proxy_master: yes 标识了它为 api-server 代理节点，但是没有使用 proxy_priority 来指定 VIP 的权重'
  when: ansible_host in proxy_master_list and not proxy_priority is defined

- name: 检查 Node 节点 (1/1)
  fail:
    msg: '至少需要一个 Node 节点'
  run_once: yes
  when: node_list[0] == ""

- name: 检查代理节点使用的网卡
  fail:
    msg: '{{ ansible_host }} 指定了 virtual_ip_device: {{ virtual_ip_device }}，但该主机上不存在名为 {{ virtual_ip_device }} 的设备'
  when: ansible_host in proxy_master_list and not (virtual_ip_device in ansible_interfaces)
