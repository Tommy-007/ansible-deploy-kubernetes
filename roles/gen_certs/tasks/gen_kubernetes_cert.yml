- name: 检查 kubernetes 证书是否存在
  ignore_errors: yes
  run_once: yes
  connection: local
  shell: |
    [ -f {{ kubernetes_tls_dir }}/ca.pem ] && [ -f {{ kubernetes_tls_dir }}/ca-key.pem ] && [ -f {{ kubernetes_tls_dir }}/server.pem ] && [ -f {{ kubernetes_tls_dir }}/server.pem ]
  failed_when: no
  changed_when: no
  register: kubernetes_exists

- block:
  - name: 生成 kubernetes 证书 - 创建证书存放目录 (1/4)
    run_once: yes
    connection: local
    file:
      path: '{{ kubernetes_tls_dir }}/json_file'
      state: directory

  - name: 生成 kubernetes 证书 - 渲染 kubernetes 证书生成 shell (2/4)
    run_once: yes
    connection: local
    template:
      src: templates/kubernetes/gen_certs.sh
      dest: '{{ kubernetes_tls_dir }}'
      mode: '0755'

  - name: 生成 kubernetes 证书 - 渲染 csr 请求文件 (3/4)
    run_once: yes
    connection: local
    template:
      src: '{{ item }}'
      dest: '{{ kubernetes_tls_dir }}/json_file'
    with_fileglob: templates/kubernetes/json_file/*

  - name: 生成 kubernetes 证书 - 生成证书 (4/4)
    run_once: yes
    connection: local
    script: '{{ kubernetes_tls_dir }}/gen_certs.sh'
    args:
      chdir: '{{ kubernetes_tls_dir }}'  
  when: kubernetes_exists.rc != 0

- name: 分发证书到 kubernetes 节点 - 分发到 master 节点 (1/2)
  copy:
    src: '{{ item }}'
    dest: '{{ install_dir }}/kubernetes/ssl/'
  with_fileglob: 
  - '{{ kubernetes_tls_dir }}/ca*.pem'
  - '{{ kubernetes_tls_dir }}/server*.pem'
  - '{{ kubernetes_tls_dir }}/kube-scheduler*.pem'
  - '{{ kubernetes_tls_dir }}/kube-controller-manager*.pem'
  - '{{ kubernetes_tls_dir }}/admin*.pem'
  when: master is defined and master

- name: 分发证书到 kubernetes 节点 - 分发到 node 节点 (2/2)
  copy:
    src: '{{ item }}'
    dest: '{{ install_dir }}/kubernetes/ssl/'
  with_fileglob: 
  - '{{ kubernetes_tls_dir }}/ca.pem'
  - '{{ kubernetes_tls_dir }}/kube-proxy*.pem'
  when: node is defined and node
